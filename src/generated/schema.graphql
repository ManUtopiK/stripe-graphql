### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Amount {
  formatted: String!
  raw: Int!
  raw_formatted: Float!
}

interface AmountInterface {
  amount: Amount!
}

type Balance {
  available: [BalanceFund!]!
  pending: [BalanceFund!]!
}

type BalanceFund implements AmountInterface & CurrencyInterface {
  amount: Amount!
  currency: Currency!
  source_types: BalanceFundSourceTypes!
}

type BalanceFundSourceTypes {
  bank_account: Int
  card: Int
  fpx: Int
}

type BalanceTransaction implements AmountInterface & CurrencyInterface & NodeInterface {
  amount: Amount!
  currency: Currency!
  id: ID!
  object: String!
}

type BankAccount implements CurrencyInterface & MetadataInterface & NodeInterface {
  account_holder_name: String
  account_holder_type: LEGAL_ENTITY_TYPE
  bank_name: String
  country: String
  currency: Currency!
  customer: String
  fingerprint: String
  id: ID!
  last4: String
  metadata: [Metadata!]!
  object: String!
  routing_number: String
  status: String
}

type Card implements MetadataInterface & NodeInterface {
  brand: String
  country: String
  default_for_currency: Boolean
  exp_month: Int
  exp_year: Int
  funding: CARD_FUNDING_TYPE!
  id: ID!
  last4: String
  metadata: [Metadata!]!
  name: String
  object: String!
}

enum CARD_FUNDING_TYPE {
  credit
  debit
  prepaid
  unknown
}

type Charge implements AmountInterface & CurrencyInterface & NodeInterface {
  amount: Amount!
  currency: Currency!
  id: ID!
  object: String!
}

type Currency {
  code: String!
  symbol: String!
}

interface CurrencyInterface {
  currency: Currency!
}

scalar CurrencyScalar

type Customer implements MetadataInterface & NodeInterface {
  bankAccounts: [BankAccount!]!
  cards: [Card!]!
  id: ID!
  metadata: [Metadata!]!
  object: String!
}

scalar DateTimeScalar

type Good implements NodeInterface & ProductInterface {
  active: Boolean!
  attributes: [String!]!
  caption: String
  created: Int!
  deactivate_on: [String!]!
  description: String
  id: ID!
  images: [String!]!
  livemode: Boolean!
  name: String!
  object: String!
  package_dimensions: PackageDimensions
  shippable: Boolean!
  type: String!
  updated: Int!
  url: String!
}

enum LEGAL_ENTITY_TYPE {
  company
  individual
}

type Metadata {
  key: String!
  value: String!
}

interface MetadataInterface {
  metadata: [Metadata!]!
}

interface NodeInterface {
  id: ID!
  object: String!
}

type PackageDimensions {
  height: Float!
  length: Float!
  weight: Float!
  width: Float!
}

input PaginationInput {
  ending_before: String
  limit: Int! = 0
  starting_after: String
}

type Plan implements AmountInterface & CurrencyInterface & MetadataInterface & NodeInterface {
  active: Boolean!
  aggregate_usage: String
  amount: Amount!
  amount_decimal: String
  billing_scheme: String!
  created: Int!
  currency: Currency!
  id: ID!
  interval: String!
  interval_count: Int!
  livemode: Boolean!
  metadata: [Metadata!]!
  nickname: String
  object: String!
  tiers: [Tier!]
  tiers_mode: String
  transform_usage: TransformUsage
  trial_period_days: Int
  usage_type: String!
}

interface ProductInterface {
  active: Boolean!
  created: Int!
  livemode: Boolean!
  name: String!
  type: String!
  updated: Int!
}

type Query {
  balance: Balance!
  balanceTransaction(id: String!): BalanceTransaction!
  balanceTransactions: [BalanceTransaction!]!
  charge(id: String!): Charge!
  charges: [Charge!]!
  customer(id: String!): Customer!
  customers: [Customer!]!
  plan(id: ID!): Plan
  plans: [Plan!]!
  product(id: ID!): ProductInterface
  products: [ProductInterface!]!
}

type Service implements NodeInterface & ProductInterface {
  active: Boolean!
  created: Int!
  id: ID!
  livemode: Boolean!
  name: String!
  object: String!
  plans: [Plan!]!
  statement_descriptor: String
  type: String!
  unit_label: String
  updated: Int!
}

type Tier {
  """Price for the entire tier."""
  flat_amount: Int!

  """
  Same as flat_amount, but contains a decimal value with at most 12 decimal places.
  """
  flat_amount_decimal: String!

  """Per unit price for units relevant to the tier."""
  unit_amount: Int!

  """
  Same as unit_amount, but contains a decimal value with at most 12 decimal places.
  """
  unit_amount_decimal: String!
  up_to: Int!
}

type TransformUsage {
  divide_by: Int!
  round: String!
}
